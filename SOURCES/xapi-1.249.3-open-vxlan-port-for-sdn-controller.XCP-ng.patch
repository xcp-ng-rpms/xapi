Open VxLAN port for VxLAN tunnels:
* add `protocol` field to the tunnel class with value in [`gre`, `vxlan`] with default: `gre`
* when a `vxlan` tunnel's access_PIF is plugged: open VxLAN port (UDP 4789)
* when the last `vxlan` tunnel's access_PIF is unplugged: close the VxLAN port

diff --git c/ocaml/idl/datamodel.ml w/ocaml/idl/datamodel.ml
index 98621e56e..a8a1503ce 100644
--- c/ocaml/idl/datamodel.ml
+++ w/ocaml/idl/datamodel.ml
@@ -1388,12 +1388,19 @@ module VLAN = struct
 end

 module Tunnel = struct
+  let tunnel_protocol = Enum ("tunnel_protocol", [
+      "gre", "GRE protocol";
+      "vxlan", "VxLAN Protocol";
+    ])

   let create = call
       ~name:"create"
       ~doc:"Create a tunnel"
-      ~params:[ Ref _pif, "transport_PIF", "PIF which receives the tagged traffic";
-                Ref _network, "network", "Network to receive the tunnelled traffic" ]
+      ~versioned_params:[
+        {param_type=Ref _pif; param_name="transport_PIF"; param_doc="PIF which receives the tagged traffic"; param_release=dundee_release; param_default=None};
+        {param_type=Ref _network; param_name="network"; param_doc="Network to receive the tunnelled traffic"; param_release=dundee_release; param_default=None};
+        {param_type=tunnel_protocol; param_name="protocol"; param_doc="Protocol used for the tunnel (GRE or VxLAN)"; param_release=next_release; param_default=Some(VEnum "gre")}
+      ]
       ~result:(Ref _tunnel, "The reference of the created tunnel object")
       ~lifecycle:[Published, rel_cowley, "Create a tunnel"]
       ~allowed_roles:_R_POOL_OP
@@ -1409,7 +1416,8 @@ module Tunnel = struct
       ()

   let t =
-    create_obj ~in_db:true ~lifecycle:[Published, rel_cowley, "A tunnel for network traffic"] ~in_oss_since:None ~persist:PersistEverything ~gen_constructor_destructor:false ~name:_tunnel ~descr:"A tunnel for network traffic" ~gen_events:true
+    create_obj ~in_db:true ~lifecycle:[Published, rel_cowley, "A tunnel for network traffic"]
+      ~in_oss_since:None ~persist:PersistEverything ~gen_constructor_destructor:false ~name:_tunnel ~descr:"A tunnel for network traffic" ~gen_events:true
       ~doccomments:[]
       ~messages_default_allowed_roles:_R_POOL_OP
       ~doc_tags:[Networking]
@@ -1420,6 +1428,7 @@ module Tunnel = struct
           field ~qualifier:StaticRO ~ty:(Ref _pif) ~lifecycle:[Published, rel_cowley, "The interface used by the tunnel"] "transport_PIF" "The interface used by the tunnel" ~default_value:(Some (VRef ""));
           field ~ty:(Map(String, String)) ~lifecycle:[Published, rel_cowley, "Status information about the tunnel"] "status" "Status information about the tunnel" ~default_value:(Some (VMap [VString "active", VString "false"]));
           field ~lifecycle:[Published, rel_cowley, "Additional configuration"] ~default_value:(Some (VMap [])) ~ty:(Map(String, String)) "other_config" "Additional configuration";
+          field ~ty:tunnel_protocol ~default_value:(Some (VEnum "gre")) ~lifecycle:[Published, rel_next, "Add protocol field to tunnel"] "protocol" "The protocol used for tunneling (either GRE or VxLAN)";
         ])
       ()
 end
diff --git c/ocaml/idl/datamodel_common.ml w/ocaml/idl/datamodel_common.ml
index 7d4821d75..46f08b45e 100644
--- c/ocaml/idl/datamodel_common.ml
+++ w/ocaml/idl/datamodel_common.ml
@@ -106,7 +106,7 @@ let tech_preview_releases = [
 (* Normally xencenter_min_verstring and xencenter_max_verstring in the xapi_globs should be set to the same value,
  * but there are exceptions: please consult the XenCenter maintainers if in doubt. *)
 let api_version_major = 2L
-let api_version_minor = 15L
+let api_version_minor = 16L
 let api_version_string =
   Printf.sprintf "%Ld.%Ld" api_version_major api_version_minor
 let api_version_vendor = "XenSource"
@@ -201,6 +201,12 @@ let get_product_releases in_product_since =
     | x::xs -> go_through_release_order xs
   in go_through_release_order release_order

+let next_release =
+  { internal = get_product_releases rel_next
+  ; opensource=get_oss_releases None
+  ; internal_deprecated_since=None
+  }
+
 let stockholm_release =
   { internal = get_product_releases rel_stockholm
   ; opensource = get_oss_releases None
diff --git i/ocaml/idl/datamodel_types.ml w/ocaml/idl/datamodel_types.ml
index 0270a82a7..a535bc3bb 100644
--- i/ocaml/idl/datamodel_types.ml
+++ w/ocaml/idl/datamodel_types.ml
@@ -64,6 +64,7 @@ let rel_naples = "naples"
 let rel_oslo = "oslo"
 let rel_quebec = "quebec"
 let rel_stockholm = "stockholm"
+let rel_next = "next"

 type api_release = {
   code_name: string option;
@@ -268,6 +269,12 @@ let release_order_full = [{
      version_minor = 15;
      branding      = "Citrix Hypervisor 8.2";
      release_date  = Some "June 2020";
+   }; {
+     code_name     = Some rel_next;
+     version_major = 2;
+     version_minor = 16;
+     branding      = "Unreleased";
+     release_date  = None;
    }
   ]
 (* When you add a new release, use the version number of the latest release, "Unreleased"
diff --git c/ocaml/tests/test_common.ml w/ocaml/tests/test_common.ml
index 7334c8cac..18d96a2dd 100644
--- c/ocaml/tests/test_common.ml
+++ w/ocaml/tests/test_common.ml
@@ -227,7 +227,7 @@ let make_bond ~__context ?(ref = Ref.make ()) ?(uuid = make_uuid ()) ~master
     ~mode ~properties ~links_up:0L ~auto_update_mac ;
   ref

-let make_tunnel = Xapi_tunnel.create_internal
+let make_tunnel = Xapi_tunnel.create_internal ~protocol:`gre

 let make_network ~__context ?(name_label = "net")
     ?(name_description = "description") ?(mTU = 1500L) ?(other_config = [])
diff --git c/ocaml/tests/test_tunnel.ml w/ocaml/tests/test_tunnel.ml
index bca5b3db8..fb548f70f 100644
--- c/ocaml/tests/test_tunnel.ml
+++ w/ocaml/tests/test_tunnel.ml
@@ -21,7 +21,7 @@ let test_create_internal () =
   let transport_PIF = T.make_pif ~__context ~network ~host () in
   let network = T.make_network ~__context ~bridge:"xapi0" () in
   let tunnel, access_PIF =
-    Xapi_tunnel.create_internal ~__context ~transport_PIF ~network ~host
+    Xapi_tunnel.create_internal ~__context ~transport_PIF ~network ~host ~protocol:`gre
   in
   Alcotest.check
     (Alcotest_comparators.ref ())
@@ -58,7 +58,7 @@ let test_create_on_unmanaged_pif () =
   let network = T.make_network ~__context ~bridge:"xapi0" () in
   Alcotest.check_raises "test_create_on_unmanaged_pif"
     Api_errors.(Server_error (pif_unmanaged, [Ref.string_of transport_PIF]))
-    (fun () -> Xapi_tunnel.create ~__context ~transport_PIF ~network |> ignore)
+    (fun () -> Xapi_tunnel.create ~__context ~transport_PIF ~network ~protocol:`gre |> ignore)

 let test_create_network_already_connected () =
   let __context = T.make_test_database () in
@@ -72,7 +72,7 @@ let test_create_network_already_connected () =
       Server_error
         ( network_already_connected
         , [Ref.string_of host; Ref.string_of transport_PIF] ))
-    (fun () -> Xapi_tunnel.create ~__context ~transport_PIF ~network |> ignore)
+    (fun () -> Xapi_tunnel.create ~__context ~transport_PIF ~network ~protocol:`gre |> ignore)

 let test_create_on_bond_slave () =
   let __context = T.make_test_database () in
@@ -87,7 +87,7 @@ let test_create_on_bond_slave () =
     Api_errors.(
       Server_error
         (cannot_add_tunnel_to_bond_slave, [Ref.string_of transport_PIF]))
-    (fun () -> Xapi_tunnel.create ~__context ~transport_PIF ~network |> ignore)
+    (fun () -> Xapi_tunnel.create ~__context ~transport_PIF ~network ~protocol:`gre |> ignore)

 let test_create_on_tunnel_access () =
   let __context = T.make_test_database () in
@@ -98,7 +98,7 @@ let test_create_on_tunnel_access () =
   Alcotest.check_raises "test_create_on_tunnel_access"
     Api_errors.(Server_error (is_tunnel_access_pif, [Ref.string_of access_PIF]))
     (fun () ->
-      Xapi_tunnel.create ~__context ~transport_PIF:access_PIF ~network |> ignore)
+      Xapi_tunnel.create ~__context ~transport_PIF:access_PIF ~network ~protocol:`gre |> ignore)

 let test_create_on_sriov_logical () =
   let __context = T.make_test_database () in
@@ -111,7 +111,7 @@ let test_create_on_sriov_logical () =
       Server_error
         (cannot_add_tunnel_to_sriov_logical, [Ref.string_of sriov_logical_PIF]))
     (fun () ->
-      Xapi_tunnel.create ~__context ~transport_PIF:sriov_logical_PIF ~network
+      Xapi_tunnel.create ~__context ~transport_PIF:sriov_logical_PIF ~network ~protocol:`gre
       |> ignore)

 let test_create_on_vlan_on_sriov_logical () =
@@ -128,7 +128,7 @@ let test_create_on_vlan_on_sriov_logical () =
       Server_error
         ( cannot_add_tunnel_to_vlan_on_sriov_logical
         , [Ref.string_of transport_PIF] ))
-    (fun () -> Xapi_tunnel.create ~__context ~transport_PIF ~network |> ignore)
+    (fun () -> Xapi_tunnel.create ~__context ~transport_PIF ~network ~protocol:`gre |> ignore)

 let test_create_tunnel_into_sriov_network () =
   let __context = T.make_test_database () in
@@ -149,7 +149,7 @@ let test_create_tunnel_into_sriov_network () =
       Server_error
         (network_incompatible_with_tunnel, [Ref.string_of sriov_network]))
     (fun () ->
-      Xapi_tunnel.create ~__context ~transport_PIF:pif ~network:sriov_network
+      Xapi_tunnel.create ~__context ~transport_PIF:pif ~network:sriov_network ~protocol:`gre
       |> ignore)

 let test_create_tunnel_into_sriov_vlan_network () =
@@ -175,7 +175,7 @@ let test_create_tunnel_into_sriov_vlan_network () =
         (network_incompatible_with_tunnel, [Ref.string_of sriov_vlan_network]))
     (fun () ->
       Xapi_tunnel.create ~__context ~transport_PIF:pif
-        ~network:sriov_vlan_network
+        ~network:sriov_vlan_network ~protocol:`gre
       |> ignore)

 let test =
diff --git c/ocaml/xapi-cli-server/cli_frontend.ml w/ocaml/xapi-cli-server/cli_frontend.ml
index 5c066071d..0e003d44f 100644
--- c/ocaml/xapi-cli-server/cli_frontend.ml
+++ w/ocaml/xapi-cli-server/cli_frontend.ml
@@ -1596,7 +1596,7 @@ let rec cmdtable_data : (string * cmd_spec) list =
   ; ( "tunnel-create"
     , {
         reqd= ["pif-uuid"; "network-uuid"]
-      ; optn= []
+      ; optn=["protocol"]
       ; help= "Create a new tunnel on a host."
       ; implementation= No_fd Cli_operations.tunnel_create
       ; flags= []
diff --git c/ocaml/xapi-cli-server/cli_operations.ml w/ocaml/xapi-cli-server/cli_operations.ml
index 477cfad5b..fb8fc626c 100644
--- c/ocaml/xapi-cli-server/cli_operations.ml
+++ w/ocaml/xapi-cli-server/cli_operations.ml
@@ -5756,7 +5756,10 @@ let tunnel_create printer rpc session_id params =
   let pif =
     Client.PIF.get_by_uuid rpc session_id (List.assoc "pif-uuid" params)
   in
-  let tunnel = Client.Tunnel.create rpc session_id pif network in
+  let protocol = Record_util.tunnel_protocol_of_string (
+    List.assoc_opt "protocol" params |> Option.value ~default:"gre"
+  ) in
+  let tunnel =  Client.Tunnel.create rpc session_id pif network protocol in
   let pif' = Client.Tunnel.get_access_PIF rpc session_id tunnel in
   let uuid = Client.PIF.get_uuid rpc session_id pif' in
   printer (Cli_printer.PList [uuid])
diff --git c/ocaml/xapi-cli-server/record_util.ml w/ocaml/xapi-cli-server/record_util.ml
index f9c0d3a68..6fe61eabc 100644
--- c/ocaml/xapi-cli-server/record_util.ml
+++ w/ocaml/xapi-cli-server/record_util.ml
@@ -826,6 +826,16 @@ let sdn_protocol_of_string s =

 let sdn_protocol_to_string = function `ssl -> "ssl" | `pssl -> "pssl"

+let tunnel_protocol_of_string s =
+  match String.lowercase_ascii s with
+  | "gre" -> `gre
+  | "vxlan" -> `vxlan
+  | _ ->  raise (Record_failure ("Expected 'gre','vxlan', got "^s))
+
+let tunnel_protocol_to_string = function
+  | `gre -> "gre"
+  | `vxlan -> "vxlan"
+
 let pif_igmp_status_to_string = function
   | `enabled ->
       "enabled"
diff --git c/ocaml/xapi-cli-server/records.ml w/ocaml/xapi-cli-server/records.ml
index 3b449e4f3..eb5e9248e 100644
--- c/ocaml/xapi-cli-server/records.ml
+++ w/ocaml/xapi-cli-server/records.ml
@@ -300,6 +300,8 @@ let tunnel_record rpc session_id tunnel =
             Client.Tunnel.remove_from_other_config rpc session_id tunnel k)
           ~get_map:(fun () -> (x ()).API.tunnel_other_config)
           ()
+      ; make_field ~name:"protocol" ~get:(fun () -> Record_util.tunnel_protocol_to_string (x ()).API.tunnel_protocol) ()
+
       ]
   }

diff --git c/ocaml/xapi/message_forwarding.ml w/ocaml/xapi/message_forwarding.ml
index e4ecc7921..c49fde6ba 100644
--- c/ocaml/xapi/message_forwarding.ml
+++ w/ocaml/xapi/message_forwarding.ml
@@ -3748,13 +3748,13 @@ functor
     end

     module Tunnel = struct
-      let create ~__context ~transport_PIF ~network =
+      let create ~__context ~transport_PIF ~network ~protocol =
         info "Tunnel.create: network = '%s'" (network_uuid ~__context network) ;
-        let local_fn = Local.Tunnel.create ~transport_PIF ~network in
+        let local_fn = Local.Tunnel.create ~transport_PIF ~network ~protocol in
         do_op_on ~local_fn ~__context
           ~host:(Db.PIF.get_host ~__context ~self:transport_PIF)
           (fun session_id rpc ->
-            Client.Tunnel.create rpc session_id transport_PIF network)
+            Client.Tunnel.create rpc session_id transport_PIF network protocol)

       let destroy ~__context ~self =
         info "Tunnel.destroy: tunnel = '%s'" (tunnel_uuid ~__context self) ;
diff --git c/ocaml/xapi/nm.ml w/ocaml/xapi/nm.ml
index 1638c4a85..bc6a82819 100644
--- c/ocaml/xapi/nm.ml
+++ w/ocaml/xapi/nm.ml
@@ -696,6 +696,20 @@ let bring_pif_up ~__context ?(management_interface = false) (pif : API.ref_PIF)
             with _ ->
               warn "could not update MTU field on PIF %s" rc.API.pIF_uuid
           ) ;
+
+          (* Open VxLAN UDP port (4789) if a VxLAN tunnel access PIF is plugged *)
+          ( match Xapi_pif_helpers.get_pif_type rc with
+            | Tunnel_access tunnel_ref ->
+              let protocol = Db.Tunnel.get_protocol ~__context ~self:tunnel_ref in
+              begin match protocol with
+                | `vxlan ->
+                  debug "Opening VxLAN UDP port for tunnel with protocol 'vxlan'";
+                  ignore @@ Helpers.call_script !Xapi_globs.firewall_port_config_script ["open"; "4789"; "udp"]
+                | `gre -> ()
+              end;
+            | _ -> ()
+          ) ;
+
           (* sync igmp_snooping_enabled *)
           if rc.API.pIF_VLAN = -1L then
             let igmp_snooping =
@@ -713,21 +727,50 @@ let bring_pif_down ~__context ?(force = false) (pif : API.ref_PIF) =
   with_local_lock (fun () ->
       let rc = Db.PIF.get_record ~__context ~self:pif in
       let open Xapi_pif_helpers in
+      let close_network_interface cleanup_f () =
+        Network.transform_networkd_exn pif (fun () ->
+            let dbg = Context.string_of_task __context in
+            debug "Making sure that PIF %s down" rc.API.pIF_uuid;
+
+            let bridge = Db.Network.get_bridge ~__context ~self:rc.API.pIF_network in
+            let cleanup = destroy_bridges ~__context ~force rc bridge in
+            List.iter (fun (name, force) -> Net.Bridge.destroy dbg force name) cleanup;
+            Net.Interface.set_persistent dbg bridge false;
+            Db.PIF.set_currently_attached ~__context ~self:pif ~value:false;
+
+            cleanup_f ()
+        )
+      in
       match get_pif_topo ~__context ~pif_rec:rc with
       | Network_sriov_logical _ :: _ ->
           Xapi_network_sriov_helpers.sriov_bring_down ~__context ~self:pif
       | VLAN_untagged _ :: Network_sriov_logical _ :: _ ->
           Db.PIF.set_currently_attached ~__context ~self:pif ~value:false
-      | _ ->
-          Network.transform_networkd_exn pif (fun () ->
-              let dbg = Context.string_of_task __context in
-              debug "Making sure that PIF %s down" rc.API.pIF_uuid ;
-              let bridge =
-                Db.Network.get_bridge ~__context ~self:rc.API.pIF_network
+      | Tunnel_access tunnel_ref :: _ ->
+          (* If last tunnel with VxLAN protocol is unplugged, close VxLAN UDP port *)
+          let maybe_close_port () =
+            let host = rc.API.pIF_host in
+            begin match Db.Tunnel.get_protocol ~__context ~self:tunnel_ref with
+            | `vxlan ->
+              let expr =
+                Eq (Field "protocol", Literal (Record_util.tunnel_protocol_to_string `vxlan))
               in
-              let cleanup = destroy_bridges ~__context ~force rc bridge in
-              List.iter
-                (fun (name, force) -> Net.Bridge.destroy dbg force name)
-                cleanup ;
-              Net.Interface.set_persistent dbg bridge false ;
-              Db.PIF.set_currently_attached ~__context ~self:pif ~value:false))
+              let tunnels = Db.Tunnel.get_records_where ~__context ~expr in
+              let still_plugged_on_host (_, tunnel_rec) =
+                let pif_ref = tunnel_rec.API.tunnel_access_PIF in
+                let pif_record = Db.PIF.get_record ~__context ~self:pif_ref in
+
+                host = pif_record.API.pIF_host && pif_record.API.pIF_currently_attached
+              in
+              let no_more_vxlan = not (List.exists still_plugged_on_host tunnels) in
+              if no_more_vxlan then (
+                debug "Last VxLAN tunnel was closed, closing VxLAN UDP port";
+                ignore @@ Helpers.call_script !Xapi_globs.firewall_port_config_script ["close"; "4789"; "udp"]
+              )
+            | `gre -> ()
+            end
+          in
+          close_network_interface maybe_close_port ()
+      | _ ->
+          close_network_interface (fun () -> ()) ()
+  )
diff --git c/ocaml/xapi/xapi_bond.ml w/ocaml/xapi/xapi_bond.ml
index 228028593..3a7bef81d 100644
--- c/ocaml/xapi/xapi_bond.ml
+++ w/ocaml/xapi/xapi_bond.ml
@@ -188,9 +188,10 @@ let move_tunnel ~__context host new_transport_PIF old_tunnel =
   let network = Db.PIF.get_network ~__context ~self:old_access_PIF in
   let plugged = Db.PIF.get_currently_attached ~__context ~self:old_access_PIF in
   (* Create new tunnel object and access PIF *)
+  let protocol = Db.Tunnel.get_protocol ~__context ~self:old_tunnel in
   let new_tunnel, new_access_PIF =
     Xapi_tunnel.create_internal ~__context ~transport_PIF:new_transport_PIF
-      ~network ~host
+      ~network ~host ~protocol
   in
   debug "Created new tunnel %s on bond" (Ref.string_of new_tunnel) ;
   (* Destroy old VLAN and VLAN-master objects *)
diff --git c/ocaml/xapi/xapi_db_upgrade.ml w/ocaml/xapi/xapi_db_upgrade.ml
index 8a4292666..bcf8fa91e 100644
--- c/ocaml/xapi/xapi_db_upgrade.ml
+++ w/ocaml/xapi/xapi_db_upgrade.ml
@@ -829,6 +829,24 @@ let remove_legacy_ssl_support =
                Db.Host.set_ssl_legacy ~__context ~self ~value:false))
   }

+let fill_tunnel_protocol =
+  {
+    description=
+      "Fill up the new field protocol of a Tunnel"
+  ; version= (fun _ -> true)
+  ; fn=
+      (fun ~__context ->
+        Db.Tunnel.get_all ~__context
+        |> List.iter (fun self ->
+          let pif = Db.Tunnel.get_access_PIF ~__context ~self in
+          let network = Db.PIF.get_network ~__context ~self:pif in
+          let other_config = Db.Network.get_other_config ~__context ~self:network in
+          let protocol = (List.assoc "xo-server:sdn-controller:encapsulation" other_config) in
+          Db.Tunnel.set_protocol ~__context ~self ~protocol:(Record_util.tunnel_protocol_of_string protocol)
+        )
+      )
+  }
+
 let rules =
   [
     upgrade_domain_type
@@ -857,6 +875,7 @@ let rules =
   ; upgrade_cluster_timeouts
   ; upgrade_secrets
   ; remove_legacy_ssl_support
+  ; fill_tunnel_protocol
   ]

 (* Maybe upgrade most recent db *)
diff --git c/ocaml/xapi/xapi_host.ml w/ocaml/xapi/xapi_host.ml
index 969742ce4..b7dda7eb1 100644
--- c/ocaml/xapi/xapi_host.ml
+++ w/ocaml/xapi/xapi_host.ml
@@ -2118,7 +2118,8 @@ let sync_tunnels ~__context ~host =
         let transport_pif =
           Db.Tunnel.get_transport_PIF ~__context ~self:tunnel
         in
-        Db.PIF.get_network ~__context ~self:transport_pif
+        let protocol = Db.Tunnel.get_protocol ~__context ~self:tunnel in
+        ( Db.PIF.get_network ~__context ~self:transport_pif, protocol )
     | _ ->
         raise
           Api_errors.(
@@ -2141,8 +2142,8 @@ let sync_tunnels ~__context ~host =
     in
     (* If the slave doesn't have any such PIF then make one: *)
     if existing_pif = [] then
-      (* On the master, we find the network the tunnel transport PIF is on *)
-      let network_of_transport_pif_on_master =
+      (* On the master, we find the network the tunnel transport PIF is on and its protocol *)
+      let network_of_transport_pif_on_master, protocol =
         get_network_of_transport_pif master_pif_rec
       in
       let pifs =
@@ -2163,7 +2164,7 @@ let sync_tunnels ~__context ~host =
           (* this is the PIF on which we want as transport PIF; let's make it *)
           ignore
             (Xapi_tunnel.create_internal ~__context ~transport_PIF:pif_ref
-               ~network:master_pif_rec.API.pIF_network ~host)
+               ~network:master_pif_rec.API.pIF_network ~host ~protocol)
       | _ ->
           (* This should never happen cos we should never have more than one of _our_ pifs
              					 * on the same nework *)
diff --git c/ocaml/xapi/xapi_tunnel.ml w/ocaml/xapi/xapi_tunnel.ml
index 86934e63e..d1b09488c 100644
--- c/ocaml/xapi/xapi_tunnel.ml
+++ w/ocaml/xapi/xapi_tunnel.ml
@@ -37,7 +37,7 @@ let choose_tunnel_device_name ~__context ~host =
   in
   choose 0

-let create_internal ~__context ~transport_PIF ~network ~host =
+let create_internal ~__context ~transport_PIF ~network ~host ~protocol =
   let tunnel = Ref.make () in
   let access_PIF = Ref.make () in
   let device = choose_tunnel_device_name ~__context ~host in
@@ -55,11 +55,12 @@ let create_internal ~__context ~transport_PIF ~network ~host =
     ~properties:[] ~capabilities:[] ~pCI:Ref.null ;
   Db.Tunnel.create ~__context ~ref:tunnel
     ~uuid:(Uuid.to_string (Uuid.make_uuid ()))
-    ~access_PIF ~transport_PIF ~status:[("active", "false")] ~other_config:[] ;
+    ~access_PIF ~transport_PIF ~status:[("active", "false")] ~other_config:[] ~protocol ;
   (tunnel, access_PIF)

-let create ~__context ~transport_PIF ~network =
+let create ~__context ~transport_PIF ~network ~protocol =
   Xapi_network.assert_network_is_managed ~__context ~self:network ;
+
   let host = Db.PIF.get_host ~__context ~self:transport_PIF in
   Xapi_pif.assert_no_other_local_pifs ~__context ~host ~network ;
   Xapi_pif_helpers.assert_pif_is_managed ~__context ~self:transport_PIF ;
@@ -78,7 +79,7 @@ let create ~__context ~transport_PIF ~network =
         raise (Api_errors.Server_error (Api_errors.openvswitch_not_active, [])))
     hosts ;
   let tunnel, access_PIF =
-    create_internal ~__context ~transport_PIF ~network ~host
+    create_internal ~__context ~transport_PIF ~network ~host ~protocol
   in
   Xapi_pif.plug ~__context ~self:access_PIF ;
   tunnel
diff --git c/ocaml/xapi/xapi_tunnel.mli w/ocaml/xapi/xapi_tunnel.mli
index a195629d3..560139217 100644
--- c/ocaml/xapi/xapi_tunnel.mli
+++ w/ocaml/xapi/xapi_tunnel.mli
@@ -19,6 +19,7 @@ val create :
      __context:Context.t
   -> transport_PIF:[`PIF] Ref.t
   -> network:[`network] Ref.t
+  -> protocol: API.tunnel_protocol
   -> [`tunnel] Ref.t
 (** Create a tunnel for a given transport PIF and network *)

@@ -27,6 +28,7 @@ val create_internal :
   -> transport_PIF:[`PIF] Ref.t
   -> network:[`network] Ref.t
   -> host:[`host] Ref.t
+  -> protocol: API.tunnel_protocol
   -> [`tunnel] Ref.t * [`PIF] Ref.t
 (** Internal version of [create] without checks/exceptions and auto-plugging *)

diff --git c/ocaml/xe-cli/bash-completion w/ocaml/xe-cli/bash-completion
index 8669705d0..0948c3e6a 100644
--- c/ocaml/xe-cli/bash-completion
+++ w/ocaml/xe-cli/bash-completion
@@ -360,8 +360,16 @@ _xe()
                 ;;

             protocol) # for sdn-controller
-                IFS=$'\n,'
-                set_completions 'ssl' "$value"
+                case "${OLDSTYLE_WORDS[1]}" in
+                    sdn-controller-introduce)
+                        IFS=$'\n,'
+                        set_completions 'ssl' "$value"
+                        ;;
+                    tunnel-create)
+                        IFS=$'\n,'
+                        set_completions 'gre,vxlan' "$value"
+                        ;;
+                esac
                 return 0
                 ;;

