diff --git a/ocaml/xapi/helpers.ml b/ocaml/xapi/helpers.ml
index b3d928f099..162e8e55bf 100644
--- a/ocaml/xapi/helpers.ml
+++ b/ocaml/xapi/helpers.ml
@@ -141,7 +141,13 @@ let determine_gateway_and_dns_ifs ~__context
       ~expr:
         (And
            ( Eq (Field "host", Literal (Ref.string_of localhost))
-           , Not (Eq (Field "ip_configuration_mode", Literal "None")) ))
+           , Or
+               ( And
+                   ( Not (Eq (Field "ip_configuration_mode", Literal "None"))
+                   , Eq (Field "primary_address_type", Literal "IPv4") )
+               , And
+                   ( Not (Eq (Field "ipv6_configuration_mode", Literal "None"))
+                   , Eq (Field "primary_address_type", Literal "IPv6") ) ) ))
   in
   if ip_pifs = [] then
     (None, None)
diff --git a/ocaml/xapi/nm.ml b/ocaml/xapi/nm.ml
index 1c13f25485..6aeda51af8 100644
--- a/ocaml/xapi/nm.ml
+++ b/ocaml/xapi/nm.ml
@@ -16,7 +16,7 @@ module D = Debug.Make (struct let name = "nm" end)
 open D
 open Stdext
 open Xstringext
-open Listext
+module Listext = Xapi_stdext_std.Listext.List
 open Threadext
 open Db_filter_types
 open Network
@@ -100,7 +100,8 @@ let determine_other_config ~__context pif_rc net_rc =
     Db.Pool.get_other_config ~__context ~self:(Helpers.get_pool ~__context)
   in
   let additional = [("network-uuids", net_rc.API.network_uuid)] in
-  (pool_oc |> List.update_assoc net_oc |> List.update_assoc pif_oc) @ additional
+  (pool_oc |> Listext.update_assoc net_oc |> Listext.update_assoc pif_oc)
+  @ additional

 let create_bond ~__context bond mtu persistent =
   (* Get all information we need from the DB before doing anything that may drop our
@@ -264,7 +265,7 @@ let create_vlan ~__context vlan persistent =
     determine_other_config ~__context master_rc master_network_rc
   in
   let other_config =
-    List.replace_assoc "network-uuids"
+    Listext.replace_assoc "network-uuids"
       (master_network_rc.API.network_uuid
       ^ ";"
       ^ slave_network_rc.API.network_uuid
@@ -512,6 +513,7 @@ let bring_pif_up ~__context ?(management_interface = false) (pif : API.ref_PIF)
                   bond_record.API.bond_slaves ;
                 maybe_update_master_pif_mac ~__context bond_record rc pif
           in
+          let address_type = rc.API.pIF_primary_address_type in
           Network.transform_networkd_exn pif (fun () ->
               let persistent = is_dom0_interface rc in
               let gateway_if, dns_if =
@@ -536,12 +538,12 @@ let bring_pif_up ~__context ?(management_interface = false) (pif : API.ref_PIF)
               Net.Bridge.make_config dbg false bridge_config ;
               Net.Interface.make_config dbg false interface_config ;
               (* Configure IPv4 parameters and DNS *)
-              let ipv4_conf, ipv4_gateway, dns =
+              let ipv4_conf, ipv4_gateway =
                 match rc.API.pIF_ip_configuration_mode with
                 | `None ->
-                    (None4, None, ([], []))
+                    (None4, None)
                 | `DHCP ->
-                    (DHCP4, None, ([], []))
+                    (DHCP4, None)
                 | `Static ->
                     let conf =
                       Static4
@@ -556,30 +558,7 @@ let bring_pif_up ~__context ?(management_interface = false) (pif : API.ref_PIF)
                       else
                         None
                     in
-                    let dns =
-                      if rc.API.pIF_DNS <> "" then
-                        let nameservers =
-                          List.map Unix.inet_addr_of_string
-                            (String.split ',' rc.API.pIF_DNS)
-                        in
-                        let domains =
-                          if List.mem_assoc "domain" rc.API.pIF_other_config
-                          then (
-                            let domains =
-                              List.assoc "domain" rc.API.pIF_other_config
-                            in
-                            try String.split ',' domains
-                            with _ ->
-                              warn "Invalid DNS search domains: %s" domains ;
-                              []
-                          ) else
-                            []
-                        in
-                        (nameservers, domains)
-                      else
-                        ([], [])
-                    in
-                    (conf, gateway, dns)
+                    (conf, gateway)
               in
               let ipv4_routes = determine_static_routes net_rc in
               (* Configure IPv6 parameters *)
@@ -618,6 +597,35 @@ let bring_pif_up ~__context ?(management_interface = false) (pif : API.ref_PIF)
                     in
                     (conf, gateway)
               in
+              let static =
+                match address_type with
+                | `IPv4 ->
+                    rc.API.pIF_ip_configuration_mode = `Static
+                | `IPv6 ->
+                    rc.API.pIF_ipv6_configuration_mode = `Static
+              in
+              let dns =
+                match (static, rc.API.pIF_DNS) with
+                | false, _ | true, "" ->
+                    ([], [])
+                | true, pif_dns ->
+                    let nameservers =
+                      List.map Unix.inet_addr_of_string
+                        (String.split ',' pif_dns)
+                    in
+                    let domains =
+                      match List.assoc_opt "domain" rc.API.pIF_other_config with
+                      | None ->
+                          []
+                      | Some domains -> (
+                        try String.split ',' domains
+                        with _ ->
+                          warn "Invalid DNS search domains: %s" domains ;
+                          []
+                      )
+                    in
+                    (nameservers, domains)
+              in
               let mtu = determine_mtu rc net_rc in
               let ethtool_settings, ethtool_offload =
                 determine_ethtool_settings rc.API.pIF_properties
@@ -642,13 +650,38 @@ let bring_pif_up ~__context ?(management_interface = false) (pif : API.ref_PIF)
               in
               Net.Interface.make_config dbg false interface_config) ;
           let new_ip =
-            match Net.Interface.get_ipv4_addr dbg bridge with
+            let addr =
+              match address_type with
+              | `IPv4 ->
+                  Net.Interface.get_ipv4_addr dbg bridge
+              | `IPv6 ->
+                  Net.Interface.get_ipv6_addr dbg bridge
+            in
+            match addr with
             | (ip, _) :: _ ->
                 Unix.string_of_inet_addr ip
             | [] ->
                 ""
           in
-          if new_ip <> rc.API.pIF_IP then (
+          let pif_ip =
+            match address_type with
+            | `IPv4 ->
+                rc.API.pIF_IP
+            | `IPv6 -> (
+              match rc.API.pIF_IPv6 with
+              | [] ->
+                  ""
+              | hd :: _ -> (
+                (* IPv6 addresses are stored with this format: <ipv6>/<cidr> *)
+                match String.split_on_char '/' hd with
+                | [ip; _] ->
+                    ip
+                | _ ->
+                    ""
+              )
+            )
+          in
+          if new_ip <> pif_ip then (
             warn "An IP address of dom0 was changed" ;
             warn "About to kill idle client stunnels" ;
             (* The master_connection would otherwise try to take a broken stunnel from the cache *)
diff --git a/ocaml/xapi/xapi_pif.ml b/ocaml/xapi/xapi_pif.ml
index 47bcdfa548..183dea2d01 100644
--- a/ocaml/xapi/xapi_pif.ml
+++ b/ocaml/xapi/xapi_pif.ml
@@ -709,7 +709,14 @@ let reconfigure_ipv6 ~__context ~self ~mode ~iPv6 ~gateway ~dNS =
   Db.PIF.set_ipv6_configuration_mode ~__context ~self ~value:mode ;
   Db.PIF.set_ipv6_gateway ~__context ~self ~value:gateway ;
   Db.PIF.set_IPv6 ~__context ~self ~value:[iPv6] ;
-  if dNS <> "" then Db.PIF.set_DNS ~__context ~self ~value:dNS ;
+  (* Keep IPv4 DNS entries *)
+  let pif_dns =
+    List.filter
+      (fun dns_addr ->
+        Xapi_stdext_unix.Unixext.domain_of_addr dns_addr = Some Unix.PF_INET)
+      (String.split_on_char ',' (Db.PIF.get_DNS ~__context ~self))
+  in
+  Db.PIF.set_DNS ~__context ~self ~value:(String.concat "," (dNS :: pif_dns)) ;
   if Db.PIF.get_currently_attached ~__context ~self then (
     debug
       "PIF %s is currently_attached and the configuration has changed; calling \
@@ -755,7 +762,14 @@ let reconfigure_ip ~__context ~self ~mode ~iP ~netmask ~gateway ~dNS =
   Db.PIF.set_IP ~__context ~self ~value:iP ;
   Db.PIF.set_netmask ~__context ~self ~value:netmask ;
   Db.PIF.set_gateway ~__context ~self ~value:gateway ;
-  Db.PIF.set_DNS ~__context ~self ~value:dNS ;
+  (* Keep IPv6 DNS entries *)
+  let pif_dns =
+    List.filter
+      (fun dns_addr ->
+        Xapi_stdext_unix.Unixext.domain_of_addr dns_addr = Some Unix.PF_INET6)
+      (String.split_on_char ',' (Db.PIF.get_DNS ~__context ~self))
+  in
+  Db.PIF.set_DNS ~__context ~self ~value:(String.concat "," (dNS :: pif_dns)) ;
   if Db.PIF.get_currently_attached ~__context ~self then (
     debug
       "PIF %s is currently_attached and the configuration has changed; calling \
diff --git a/scripts/network-init b/scripts/network-init
index 616846a56a..5aa1858c50 100755
--- a/scripts/network-init
+++ b/scripts/network-init
@@ -36,14 +36,14 @@ prepare_networking() {
             else
                 PIF="${PHYSICAL_PIF}"
             fi
+            isStatic=false
             case $MODE in
                 dhcp|none)
                     $XE pif-reconfigure-ip uuid=${PIF} mode=${MODE} || true
                     ;;
                 static)
-                    domain=`echo $DOMAIN | tr ' ' ','`
+                    isStatic=true
                     $XE pif-reconfigure-ip uuid=${PIF} mode=static IP=${IP} netmask=${NETMASK} gateway=${GATEWAY} ${DNS+DNS=$DNS} || true
-                    [ $domain ] && $XE pif-param-set uuid=${PIF} other-config:domain=$domain || true
                     ;;
             esac
             case $MODEV6 in
@@ -51,9 +51,14 @@ prepare_networking() {
                     $XE pif-reconfigure-ipv6 uuid=${PIF} mode=${MODEV6} || true
                     ;;
                 static)
-                    $XE pif-reconfigure-ipv6 uuid=${PIF} mode=static IPv6=${IPv6} gateway=${IPv6_GATEWAY} || true
+                    isStatic=true
+                    $XE pif-reconfigure-ipv6 uuid=${PIF} mode=static IPv6=${IPv6} gateway=${IPv6_GATEWAY} ${DNS+DNS=$DNS} || true
                     ;;
             esac
+            if [ $isStatic = true ] ; then
+                domain=`echo $DOMAIN | tr ' ' ','`
+                [ $domain ] && $XE pif-param-set uuid=${PIF} other-config:domain=$domain || true
+            fi
             if [ "${MANAGEMENT_ADDRESS_TYPE}" = "IPv6" ] ; then
                     $XE host-management-disable
                     $XE pif-set-primary-address-type uuid="${PIF}" primary_address_type=${MANAGEMENT_ADDRESS_TYPE}
@@ -97,6 +102,7 @@ rename_network_label() {
             name_label="Guest Network $((${device_id} - 2))"
             pif_uuid=$(${XE} pif-list device=${device} params=uuid --minimal)
             ${XE} pif-reconfigure-ip uuid="${pif_uuid}" mode=none
+            ${XE} pif-reconfigure-ipv6 uuid="${pif_uuid}" mode=none
         else
             echo "Warning: found unsupported device ${device}"
             continue
