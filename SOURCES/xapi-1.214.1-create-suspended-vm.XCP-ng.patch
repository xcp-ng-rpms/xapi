This patch enables to create a VM in `Suspended` state with a `suspend_VDI` set
This add to the `vm.create` method:
* `power_state` with default value: `Halted`
* `suspend_VDI` with default value: `Ref.null`
* `last_booted_record` with default value: `""`
* `last_boot_CPU_flags` with default value: `[]`
The default behavior is not changed

commit 89c6308ad
Author: benjamreis <benjamin.reis@vates.fr>
Date:   Sat Dec 14 11:17:14 2019 +0100

    Enable to create a VM in Suspended mode with suspend_VDI set

diff --git a/ocaml/idl/datamodel_vm.ml b/ocaml/idl/datamodel_vm.ml
index 2802c6d21..758c628a6 100644
--- a/ocaml/idl/datamodel_vm.ml
+++ b/ocaml/idl/datamodel_vm.ml
@@ -1344,13 +1344,13 @@ let set_NVRAM_EFI_variables = call ~flags:[`Session]
       ~contents:
         ([ uid _vm;
          ] @ (allowed_and_current_operations operations) @ [
-           field ~writer_roles:_R_VM_OP ~qualifier:DynamicRO ~ty:power_state "power_state" "Current power state of the machine";
            namespace ~name:"name" ~contents:(names oss_since_303 RW) ();
+           field ~writer_roles:_R_VM_OP ~qualifier:StaticRO ~default_value:(Some (VEnum "Halted")) ~ty:power_state "power_state" "Current power state of the machine";
 
            field ~ty:Int "user_version" "Creators of VMs and templates may store version information here.";
            field ~effect:true ~ty:Bool "is_a_template" "true if this is a template. Template VMs can never be started, they are used only for cloning other VMs";
            field ~ty:Bool ~default_value:(Some (VBool false)) ~qualifier:DynamicRO ~writer_roles:_R_POOL_ADMIN ~lifecycle:[Published, rel_falcon, "Identifies default templates"] "is_default_template" "true if this is a default template. Default template VMs can never be started or migrated, they are used only for cloning other VMs";
-           field ~qualifier:DynamicRO ~ty:(Ref _vdi) "suspend_VDI" "The VDI that a suspend image is stored on. (Only has meaning if VM is currently suspended)";
+           field ~qualifier:StaticRO ~default_value:(Some (VRef (null_ref))) ~ty:(Ref _vdi) "suspend_VDI" "The VDI that a suspend image is stored on. (Only has meaning if VM is currently suspended)";
 
            field ~writer_roles:_R_VM_POWER_ADMIN ~qualifier:DynamicRO ~ty:(Ref _host) "resident_on" "the host the VM is currently resident on";
            field ~writer_roles:_R_VM_POWER_ADMIN ~in_oss_since:None ~internal_only:true ~qualifier:DynamicRO ~ty:(Ref _host) "scheduled_to_be_resident_on" "the host on which the VM is due to be started/resumed/migrated. This acts as a memory reservation indicator";
@@ -1378,14 +1378,14 @@ let set_NVRAM_EFI_variables = call ~flags:[`Session]
            field  ~ty:(Map(String, String)) "other_config" "additional configuration" ~map_keys_roles:["pci", _R_POOL_ADMIN; ("folder",(_R_VM_OP));("XenCenter.CustomFields.*",(_R_VM_OP))];
            field ~qualifier:DynamicRO ~ty:Int "domid" "domain ID (if available, -1 otherwise)";
            field ~qualifier:DynamicRO ~in_oss_since:None ~ty:String "domarch" "Domain architecture (if available, null string otherwise)";
-           field ~in_oss_since:None ~qualifier:DynamicRO ~ty:(Map(String, String)) "last_boot_CPU_flags" "describes the CPU flags on which the VM was last booted";
+           field ~in_oss_since:None ~qualifier:StaticRO ~ty:(Map(String, String)) ~default_value:(Some (VMap [])) "last_boot_CPU_flags" "describes the CPU flags on which the VM was last booted";
            field ~qualifier:DynamicRO ~ty:Bool "is_control_domain" "true if this is a control domain (domain 0 or a driver domain)";
            field ~qualifier:DynamicRO ~ty:(Ref _vm_metrics) "metrics" "metrics associated with this VM";
            field ~qualifier:DynamicRO ~ty:(Ref _vm_guest_metrics) "guest_metrics" "metrics associated with the running guest";
            (* This was an internal field in Rio, Miami beta1, Miami beta2 but is now exposed so that
               	   it will be included automatically in Miami GA exports and can be restored, important if
               	   the VM is in a suspended state *)
-           field ~in_oss_since:None ~internal_only:false ~in_product_since:rel_miami ~qualifier:DynamicRO ~ty:String "last_booted_record" "marshalled value containing VM record at time of last boot, updated dynamically to reflect the runtime state of the domain" ~default_value:(Some (VString ""));
+           field ~in_oss_since:None ~internal_only:false ~in_product_since:rel_miami ~qualifier:StaticRO ~ty:String "last_booted_record" "marshalled value containing VM record at time of last boot, updated dynamically to reflect the runtime state of the domain" ~default_value:(Some (VString ""));
            field ~in_oss_since:None ~ty:String "recommendations" "An XML specification of recommended values and ranges for properties of this VM";
            field ~effect:true ~in_oss_since:None ~ty:(Map(String, String)) ~in_product_since:rel_miami ~qualifier:RW "xenstore_data" "data to be inserted into the xenstore tree (/local/domain/<domid>/vm-data) after the VM is created." ~default_value:(Some (VMap []));
            field ~writer_roles:_R_POOL_OP ~in_oss_since:None ~ty:Bool ~in_product_since:rel_orlando ~internal_deprecated_since:rel_boston ~qualifier:StaticRO "ha_always_run" "if true then the system will attempt to keep the VM running as much as possible." ~default_value:(Some (VBool false));
diff --git a/ocaml/tests/test_common.ml b/ocaml/tests/test_common.ml
index 4b57b77e4..56391018b 100644
--- a/ocaml/tests/test_common.ml
+++ b/ocaml/tests/test_common.ml
@@ -108,10 +108,10 @@ let make_vm ~__context ?(name_label="name_label") ?(name_description="descriptio
     ?(ha_restart_priority="") ?(tags=[]) ?(blocked_operations=[]) ?(protection_policy=Ref.null)
     ?(is_snapshot_from_vmpp=false) ?(appliance=Ref.null) ?(start_delay=0L)
     ?(snapshot_schedule=Ref.null) ?(is_vmss_snapshot=false)
-    ?(shutdown_delay=0L) ?(order=0L) ?(suspend_SR=Ref.null) ?(version=0L)
+    ?(shutdown_delay=0L) ?(order=0L) ?(suspend_SR=Ref.null) ?(suspend_VDI=Ref.null) ?(version=0L)
     ?(generation_id="0:0") ?(hardware_platform_version=0L)
     ?(has_vendor_device=false) ?(has_vendor_device=false) ?(reference_label="")
-    ?(domain_type=`hvm) ?(nVRAM=[]) () =
+    ?(domain_type=`hvm) ?(nVRAM=[]) ?(last_booted_record="") ?(last_boot_CPU_flags=[]) ?(power_state=`Halted) () =
   Xapi_vm.create ~__context ~name_label ~name_description ~user_version ~is_a_template
     ~affinity ~memory_target ~memory_static_max ~memory_dynamic_max ~memory_dynamic_min
     ~memory_static_min ~vCPUs_params ~vCPUs_max ~vCPUs_at_startup ~actions_after_shutdown
@@ -119,10 +119,10 @@ let make_vm ~__context ?(name_label="name_label") ?(name_description="descriptio
     ~pV_args ~pV_bootloader_args ~pV_legacy_args ~hVM_boot_policy ~hVM_boot_params
     ~hVM_shadow_multiplier ~platform ~nVRAM ~pCI_bus ~other_config ~xenstore_data ~recommendations
     ~ha_always_run ~ha_restart_priority ~tags ~blocked_operations ~protection_policy
-    ~is_snapshot_from_vmpp ~appliance ~start_delay ~shutdown_delay ~order ~suspend_SR
+    ~is_snapshot_from_vmpp ~appliance ~start_delay ~shutdown_delay ~order ~suspend_SR ~suspend_VDI
     ~snapshot_schedule ~is_vmss_snapshot
     ~version ~generation_id ~hardware_platform_version ~has_vendor_device ~reference_label
-    ~domain_type
+    ~domain_type ~last_booted_record ~last_boot_CPU_flags ~power_state
 
 let make_host ~__context ?(uuid=make_uuid ()) ?(name_label="host")
     ?(name_description="description") ?(hostname="localhost") ?(address="127.0.0.1")
diff --git a/ocaml/xapi/cli_operations.ml b/ocaml/xapi/cli_operations.ml
index 2db466a42..44005305a 100644
--- a/ocaml/xapi/cli_operations.ml
+++ b/ocaml/xapi/cli_operations.ml
@@ -1689,12 +1689,16 @@ let vm_create printer rpc session_id params =
       ~shutdown_delay:0L
       ~order:0L
       ~suspend_SR:Ref.null
+      ~suspend_VDI:Ref.null
       ~version:0L
       ~generation_id:""
       ~hardware_platform_version:0L
       ~has_vendor_device:false ~reference_label:""
       ~domain_type:`unspecified
       ~nVRAM:[]
+      ~last_booted_record:""
+      ~last_boot_CPU_flags:[]
+      ~power_state:`Halted
   in
   let uuid=Client.VM.get_uuid rpc session_id vm in
   printer (Cli_printer.PList [uuid])
diff --git a/ocaml/xapi/import_xva.ml b/ocaml/xapi/import_xva.ml
index 85377d05a..492fb6e82 100644
--- a/ocaml/xapi/import_xva.ml
+++ b/ocaml/xapi/import_xva.ml
@@ -95,11 +95,15 @@ let make __context rpc session_id srid (vms, vdis) =
             ~shutdown_delay:0L
             ~order:0L
             ~suspend_SR:Ref.null
+            ~suspend_VDI:Ref.null
             ~version:0L
             ~generation_id:""
             ~hardware_platform_version:0L
             ~has_vendor_device:false ~reference_label:""
             ~nVRAM:[]
+            ~last_booted_record:""
+            ~last_boot_CPU_flags:[]
+            ~power_state:`Halted
         in
 
         TaskHelper.operate_on_db_task ~__context
diff --git a/ocaml/xapi/xapi_vm.ml b/ocaml/xapi/xapi_vm.ml
index 4a988e8dd..062948f55 100644
--- a/ocaml/xapi/xapi_vm.ml
+++ b/ocaml/xapi/xapi_vm.ml
@@ -471,8 +471,9 @@ let resume_on  ~__context ~vm ~host ~start_paused ~force =
   resume ~__context ~vm ~start_paused ~force
 
 
-let create ~__context ~name_label ~name_description
+let create ~__context ~name_label ~name_description ~power_state
     ~user_version ~is_a_template
+    ~suspend_VDI
     ~affinity
     ~memory_target
     ~memory_static_max
@@ -487,7 +488,8 @@ let create ~__context ~name_label ~name_description
     ~pV_kernel ~pV_ramdisk ~pV_args ~pV_bootloader_args ~pV_legacy_args
     ~hVM_boot_policy ~hVM_boot_params ~hVM_shadow_multiplier
     ~platform
-    ~pCI_bus ~other_config ~recommendations ~xenstore_data
+    ~pCI_bus ~other_config ~last_boot_CPU_flags ~last_booted_record
+    ~recommendations ~xenstore_data
     ~ha_always_run ~ha_restart_priority ~tags
     ~blocked_operations ~protection_policy
     ~is_snapshot_from_vmpp
@@ -505,6 +507,17 @@ let create ~__context ~name_label ~name_description
     ~nVRAM
   : API.ref_VM =
 
+  (* TODO: Error handling, but how? raise? or return null ref? or put default values? *)
+  if power_state = `Halted && suspend_VDI != Ref.null then begin
+    error "No suspend_VDI should be provided if VM created in `Halted state";
+  end
+  else if power_state = `Suspended && suspend_VDI = Ref.null then begin
+    error "VM created in `Suspended state needs a suspend_VDI";
+  end
+  else begin
+    error "Bad power state for VM creation";
+  end;
+
   if has_vendor_device then
     Pool_features.assert_enabled ~__context ~f:Features.PCI_device_for_auto_update;
   (* Add random mac_seed if there isn't one specified already *)
@@ -523,6 +536,8 @@ let create ~__context ~name_label ~name_description
 
   let metrics = Ref.make () and metrics_uuid = Uuid.to_string (Uuid.make_uuid ()) in
   let vCPUs_utilisation = [(0L, 0.)] in
+  let suspended = (power_state = `Suspended) in
+  let current_domain_type = if suspended then domain_type else `unspecified in
   Db.VM_metrics.create ~__context ~ref:metrics ~uuid:metrics_uuid
     ~memory_actual:0L ~vCPUs_number:0L
     ~vCPUs_utilisation
@@ -537,11 +552,13 @@ let create ~__context ~name_label ~name_description
     ~hvm:false
     ~nested_virt:false
     ~nomigrate:false
-    ~current_domain_type:`unspecified
+    ~current_domain_type
   ;
   let domain_type = if domain_type = `unspecified then derive_domain_type ~hVM_boot_policy else domain_type in
+  let last_booted_record = if suspended then last_booted_record else "" in
+  let last_boot_CPU_flags = if suspended then last_boot_CPU_flags else [] in
   Db.VM.create ~__context ~ref:vm_ref ~uuid:(Uuid.to_string uuid)
-    ~power_state:(`Halted) ~allowed_operations:[]
+    ~power_state ~allowed_operations:[]
     ~current_operations:[]
     ~blocked_operations:[]
     ~name_label ~name_description
@@ -562,16 +579,16 @@ let create ~__context ~name_label ~name_description
     ~actions_after_shutdown ~actions_after_reboot
     ~actions_after_crash
     ~hVM_boot_policy ~hVM_boot_params ~hVM_shadow_multiplier
-    ~suspend_VDI:Ref.null
+    ~suspend_VDI
     ~platform
     ~nVRAM
     ~pV_kernel ~pV_ramdisk ~pV_args ~pV_bootloader ~pV_bootloader_args
     ~pV_legacy_args
     ~pCI_bus ~other_config ~domid:(-1L) ~domarch:""
-    ~last_boot_CPU_flags:[]
+    ~last_boot_CPU_flags
     ~is_control_domain:false
     ~metrics ~guest_metrics:Ref.null
-    ~last_booted_record:"" ~xenstore_data ~recommendations
+    ~last_booted_record ~xenstore_data ~recommendations
     ~blobs:[]
     ~ha_restart_priority
     ~ha_always_run ~tags
@@ -592,7 +609,6 @@ let create ~__context ~name_label ~name_description
     ~requires_reboot:false ~reference_label
     ~domain_type
   ;
-  Db.VM.set_power_state ~__context ~self:vm_ref ~value:`Halted;
   Xapi_vm_lifecycle.update_allowed_operations ~__context ~self:vm_ref;
   update_memory_overhead ~__context ~vm:vm_ref;
   update_vm_virtual_hardware_platform_version ~__context ~vm:vm_ref;
diff --git a/ocaml/xapi/xapi_vm.mli b/ocaml/xapi/xapi_vm.mli
index 63f8351cc..08ac44148 100644
--- a/ocaml/xapi/xapi_vm.mli
+++ b/ocaml/xapi/xapi_vm.mli
@@ -92,8 +92,10 @@ val create :
   __context:Context.t ->
   name_label:string ->
   name_description:string ->
+  power_state:API.vm_power_state ->
   user_version:int64 ->
   is_a_template:bool ->
+  suspend_VDI:API.ref_VDI ->
   affinity:[ `host ] Ref.t ->
   memory_target:int64 ->
   memory_static_max:int64 ->
@@ -123,6 +125,8 @@ val create :
   platform:(string * string) list ->
   pCI_bus:string ->
   other_config:(string * string) list ->
+  last_boot_CPU_flags:(string * string) list ->
+  last_booted_record:string ->
   recommendations:string ->
   xenstore_data:(string * string) list ->
   ha_always_run:bool ->
