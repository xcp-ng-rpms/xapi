diff --git a/ocaml/xapi/create_misc.ml b/ocaml/xapi/create_misc.ml
index 1b6e26ab8..768e7c558 100644
--- a/ocaml/xapi/create_misc.ml
+++ b/ocaml/xapi/create_misc.ml
@@ -195,10 +195,13 @@ and ensure_domain_zero_record ~__context (host_info : host_info) : [`VM] Ref.t =
   let domain_zero_ref, found =
     try (ref_lookup (), true) with _ -> (ref_create (), false)
   in
-  if found then
-    update_domain_zero_record ~__context ~domain_zero_ref host_info
-  else
+  if found then (
+    debug "ensure_domain_zero_record: running update_domain_zero_record";
+    update_domain_zero_record ~__context ~domain_zero_ref host_info;
+  ) else (
+    debug "ensure_domain_zero_record: running create_domain_zero_record";
     create_domain_zero_record ~__context ~domain_zero_ref host_info ;
+  );
   domain_zero_ref
 
 and ensure_domain_zero_console_record ~__context ~domain_zero_ref : unit =
@@ -248,19 +251,21 @@ and ensure_domain_zero_metrics_record ~__context ~domain_zero_ref
 
 and create_domain_zero_record ~__context ~domain_zero_ref (host_info : host_info)
     : unit =
-  (* Determine domain 0 memory constraints. *)
+  debug "create_domain_zero_record: determine domain 0 memory constraints...";
   let memory = create_domain_zero_memory_constraints host_info in
-  (* Determine information about the host machine. *)
+  debug "create_domain_zero_record: determine information about the host machine...";
   let domarch =
     let i = Int64.of_nativeint (Int64.to_nativeint 0xffffffffL) in
     if i > 0L then "x64" else "x32"
   in
   let localhost = Helpers.get_localhost ~__context in
-  (* Read the control domain uuid from the inventory file *)
+  debug "create_domain_zero_record: Read the control domain uuid from the inventory file...";
   let uuid = host_info.dom0_uuid in
+  debug "create_domain_zero_record: Count cpus...";
   let vcpus = count_cpus () in
   let metrics = Ref.make () in
   (* Now create the database record. *)
+  debug "create_domain_zero_record: call Db.VM.create";
   Db.VM.create ~__context ~ref:domain_zero_ref
     ~name_label:("Control domain on host: " ^ host_info.hostname)
     ~uuid
@@ -294,8 +299,11 @@ and create_domain_zero_record ~__context ~domain_zero_ref (host_info : host_info
     ~domain_type:Xapi_globs.domain_zero_domain_type ~nVRAM:[]
     ~pending_guidances:[] ~recommended_guidances:[]
     ~pending_guidances_recommended:[] ~pending_guidances_full:[] ;
+  debug "create_domain_zero_record Db.VM.create called";
   ensure_domain_zero_metrics_record ~__context ~domain_zero_ref host_info ;
+  debug "create_domain_zero_record ensure_domain_zero_metrics_record called";
   Db.Host.set_control_domain ~__context ~self:localhost ~value:domain_zero_ref ;
+  debug "create_domain_zero_record set_control_domain called";
   Xapi_vm_helpers.update_memory_overhead ~__context ~vm:domain_zero_ref
 
 and create_domain_zero_console_record_with_protocol ~__context ~domain_zero_ref
@@ -554,10 +562,15 @@ let make_software_version ~__context host_info =
   @ make_packs_info ()
 
 let create_software_version ~__context ?(info = None) () =
+  debug "create_software_version 0";
   let host_info = Option.value ~default:(read_localhost_info ~__context) info in
+  debug "create_software_version 1";
   let software_version = make_software_version ~__context host_info in
+  debug "create_software_version 2";
   let host = Helpers.get_localhost ~__context in
-  Db.Host.set_software_version ~__context ~self:host ~value:software_version
+  debug "create_software_version 3";
+  Db.Host.set_software_version ~__context ~self:host ~value:software_version;
+  debug "create_software_version 4"
 
 let create_host_cpu ~__context host_info =
   let open Cpuid_helpers in
@@ -727,6 +740,7 @@ let create_pool_cpuinfo ~__context =
       (CPU_policy.to_string after)
 
 let create_chipset_info ~__context host_info =
+  debug "create_chipset_info";
   match host_info.chipset_info with
   | None ->
       warn "Failed to get host chipset info; not updating database"
diff --git a/ocaml/xapi/dbsync_slave.ml b/ocaml/xapi/dbsync_slave.ml
index 84af29bbf..a576642b2 100644
--- a/ocaml/xapi/dbsync_slave.ml
+++ b/ocaml/xapi/dbsync_slave.ml
@@ -88,14 +88,20 @@ let refresh_localhost_info ~__context info =
   (* Xapi_ha_flags.resync_host_armed_flag __context host; *)
   debug "Updating host software_version and updates_requiring_reboot" ;
   Create_misc.create_updates_requiring_reboot_info ~__context ~host ;
+  debug "refresh_localhost_info 1";
   Create_misc.create_software_version ~__context ~info:(Some info) () ;
+  debug "refresh_localhost_info 2";
   Db.Host.set_API_version_major ~__context ~self:host
     ~value:Datamodel_common.api_version_major ;
+  debug "refresh_localhost_info 3";
   Db.Host.set_API_version_minor ~__context ~self:host
     ~value:Datamodel_common.api_version_minor ;
+  debug "refresh_localhost_info 4";
   Db.Host.set_virtual_hardware_platform_versions ~__context ~self:host
     ~value:Xapi_globs.host_virtual_hardware_platform_versions ;
+  debug "refresh_localhost_info 5";
   Db.Host.set_hostname ~__context ~self:host ~value:info.hostname ;
+  debug "refresh_localhost_info 6";
   let caps =
     match info.hypervisor with
     | None ->
@@ -103,13 +109,18 @@ let refresh_localhost_info ~__context info =
     | Some {capabilities; _} ->
         String.split ' ' capabilities
   in
+  debug "refresh_localhost_info 7";
   Db.Host.set_capabilities ~__context ~self:host ~value:caps ;
+  debug "refresh_localhost_info 8";
   Db.Host.set_address ~__context ~self:host ~value:(get_my_ip_addr ~__context) ;
+  debug "refresh_localhost_info 9";
   let boot_time_key = "boot_time" in
   let boot_time_value = string_of_float (Date.to_float (get_start_time ())) in
   Db.Host.remove_from_other_config ~__context ~self:host ~key:boot_time_key ;
+  debug "refresh_localhost_info 10";
   Db.Host.add_to_other_config ~__context ~self:host ~key:boot_time_key
     ~value:boot_time_value ;
+  debug "refresh_localhost_info 11";
   let agent_start_key = "agent_start_time" in
   let agent_start_time = string_of_float (Unix.time ()) in
   Db.Host.remove_from_other_config ~__context ~self:host ~key:agent_start_key ;
diff --git a/ocaml/xapi/storage_access.ml b/ocaml/xapi/storage_access.ml
index 02e5545d1..6eeb273ac 100644
--- a/ocaml/xapi/storage_access.ml
+++ b/ocaml/xapi/storage_access.ml
@@ -693,6 +693,7 @@ let resynchronise_pbds ~__context ~pbds =
    and must be synchronised against the state of the world. Therefore we must synchronise the
    xapi view with the storage_impl view here. *)
 let refresh_local_vdi_activations ~__context =
+  debug "refresh_local_vdi_activations";
   let all_vdi_recs = Db.VDI.get_all_records ~__context in
   let localhost = Helpers.get_localhost ~__context in
   let all_hosts = Db.Host.get_all ~__context in
@@ -767,7 +768,7 @@ let refresh_local_vdi_activations ~__context =
       )
       (Db.SR.get_all ~__context)
   in
-  List.iter
+  let res = List.iter
     (fun (vdi_ref, vdi_rec) ->
       let sr = List.assoc vdi_rec.API.vDI_SR sr_uuids in
       let vdi = Storage_interface.Vdi.of_string vdi_rec.API.vDI_location in
@@ -796,6 +797,10 @@ let refresh_local_vdi_activations ~__context =
         unlock_vdi (vdi_ref, vdi_rec)
     )
     all_vdi_recs
+  in
+  debug "refresh_local_vdi_activations done";
+  res
+
 
 (* This is a symptom of the ordering-sensitivity of the SM backend: it is not possible
    to upgrade RO -> RW or downgrade RW -> RO on the fly.
diff --git a/ocaml/xapi/xapi_pgpu.ml b/ocaml/xapi/xapi_pgpu.ml
index a8ce14d73..168fc0657 100644
--- a/ocaml/xapi/xapi_pgpu.ml
+++ b/ocaml/xapi/xapi_pgpu.ml
@@ -120,6 +120,7 @@ let is_local_pgpu ~__context (_, pci_rec) =
 
 (* Makes DB match reality for pgpus on local host *)
 let update_gpus ~__context =
+  debug "update_gpus";
   let host = Helpers.get_localhost ~__context in
   let system_display_device = Xapi_pci.get_system_display_device () in
   let existing_pgpus =
