diff --git a/ocaml/xapi/create_misc.ml b/ocaml/xapi/create_misc.ml
index 1b6e26ab8..69d80a700 100644
--- a/ocaml/xapi/create_misc.ml
+++ b/ocaml/xapi/create_misc.ml
@@ -195,10 +195,13 @@ and ensure_domain_zero_record ~__context (host_info : host_info) : [`VM] Ref.t =
   let domain_zero_ref, found =
     try (ref_lookup (), true) with _ -> (ref_create (), false)
   in
-  if found then
-    update_domain_zero_record ~__context ~domain_zero_ref host_info
-  else
+  if found then (
+    debug "ensure_domain_zero_record: running update_domain_zero_record";
+    update_domain_zero_record ~__context ~domain_zero_ref host_info;
+  ) else (
+    debug "ensure_domain_zero_record: running create_domain_zero_record";
     create_domain_zero_record ~__context ~domain_zero_ref host_info ;
+  );
   domain_zero_ref
 
 and ensure_domain_zero_console_record ~__context ~domain_zero_ref : unit =
@@ -248,19 +251,21 @@ and ensure_domain_zero_metrics_record ~__context ~domain_zero_ref
 
 and create_domain_zero_record ~__context ~domain_zero_ref (host_info : host_info)
     : unit =
-  (* Determine domain 0 memory constraints. *)
+  debug "create_domain_zero_record: determine domain 0 memory constraints...";
   let memory = create_domain_zero_memory_constraints host_info in
-  (* Determine information about the host machine. *)
+  debug "create_domain_zero_record: determine information about the host machine...";
   let domarch =
     let i = Int64.of_nativeint (Int64.to_nativeint 0xffffffffL) in
     if i > 0L then "x64" else "x32"
   in
   let localhost = Helpers.get_localhost ~__context in
-  (* Read the control domain uuid from the inventory file *)
+  debug "create_domain_zero_record: Read the control domain uuid from the inventory file...";
   let uuid = host_info.dom0_uuid in
+  debug "create_domain_zero_record: Count cpus...";
   let vcpus = count_cpus () in
   let metrics = Ref.make () in
   (* Now create the database record. *)
+  debug "create_domain_zero_record: call Db.VM.create";
   Db.VM.create ~__context ~ref:domain_zero_ref
     ~name_label:("Control domain on host: " ^ host_info.hostname)
     ~uuid
@@ -294,8 +299,11 @@ and create_domain_zero_record ~__context ~domain_zero_ref (host_info : host_info
     ~domain_type:Xapi_globs.domain_zero_domain_type ~nVRAM:[]
     ~pending_guidances:[] ~recommended_guidances:[]
     ~pending_guidances_recommended:[] ~pending_guidances_full:[] ;
+  debug "create_domain_zero_record Db.VM.create called";
   ensure_domain_zero_metrics_record ~__context ~domain_zero_ref host_info ;
+  debug "create_domain_zero_record ensure_domain_zero_metrics_record called";
   Db.Host.set_control_domain ~__context ~self:localhost ~value:domain_zero_ref ;
+  debug "create_domain_zero_record set_control_domain called";
   Xapi_vm_helpers.update_memory_overhead ~__context ~vm:domain_zero_ref
 
 and create_domain_zero_console_record_with_protocol ~__context ~domain_zero_ref
@@ -727,6 +735,7 @@ let create_pool_cpuinfo ~__context =
       (CPU_policy.to_string after)
 
 let create_chipset_info ~__context host_info =
+  debug "create_chipset_info";
   match host_info.chipset_info with
   | None ->
       warn "Failed to get host chipset info; not updating database"
diff --git a/ocaml/xapi/storage_access.ml b/ocaml/xapi/storage_access.ml
index 02e5545d1..6eeb273ac 100644
--- a/ocaml/xapi/storage_access.ml
+++ b/ocaml/xapi/storage_access.ml
@@ -693,6 +693,7 @@ let resynchronise_pbds ~__context ~pbds =
    and must be synchronised against the state of the world. Therefore we must synchronise the
    xapi view with the storage_impl view here. *)
 let refresh_local_vdi_activations ~__context =
+  debug "refresh_local_vdi_activations";
   let all_vdi_recs = Db.VDI.get_all_records ~__context in
   let localhost = Helpers.get_localhost ~__context in
   let all_hosts = Db.Host.get_all ~__context in
@@ -767,7 +768,7 @@ let refresh_local_vdi_activations ~__context =
       )
       (Db.SR.get_all ~__context)
   in
-  List.iter
+  let res = List.iter
     (fun (vdi_ref, vdi_rec) ->
       let sr = List.assoc vdi_rec.API.vDI_SR sr_uuids in
       let vdi = Storage_interface.Vdi.of_string vdi_rec.API.vDI_location in
@@ -796,6 +797,10 @@ let refresh_local_vdi_activations ~__context =
         unlock_vdi (vdi_ref, vdi_rec)
     )
     all_vdi_recs
+  in
+  debug "refresh_local_vdi_activations done";
+  res
+
 
 (* This is a symptom of the ordering-sensitivity of the SM backend: it is not possible
    to upgrade RO -> RW or downgrade RW -> RO on the fly.
