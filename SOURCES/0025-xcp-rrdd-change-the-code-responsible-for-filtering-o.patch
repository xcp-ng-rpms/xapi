From bc17adc4bba4f5a8adc425f4f0f4f5b2cfd13848 Mon Sep 17 00:00:00 2001
From: Pau Ruiz Safont <pau.ruizsafont@cloud.com>
Date: Thu, 5 Jun 2025 16:16:38 +0100
Subject: [PATCH] xcp-rrdd: change the code responsible for filtering out
 paused domains

The consolidator used to be aware of which domains were paused, this was used
to avoid reporting memory changes for paused domains, exclusively. Move that
responsibility to the domain memory reporter instead, this makes the decision
local, simplifying code.

This is useful to separate the memory code from the rest of rrdd.

Signed-off-by: Pau Ruiz Safont <pau.ruizsafont@cloud.com>
---
 ocaml/xcp-rrdd/bin/rrdd/rrdd_monitor.ml       |  20 +--
 ocaml/xcp-rrdd/bin/rrdd/xcp_rrdd.ml           | 135 +++++++++---------
 ocaml/xcp-rrdd/test/rrdd/test_rrdd_monitor.ml |  19 ++-
 3 files changed, 84 insertions(+), 90 deletions(-)

diff --git a/ocaml/xcp-rrdd/bin/rrdd/rrdd_monitor.ml b/ocaml/xcp-rrdd/bin/rrdd/rrdd_monitor.ml
index 4be1152d8..4bd0c4d43 100644
--- a/ocaml/xcp-rrdd/bin/rrdd/rrdd_monitor.ml
+++ b/ocaml/xcp-rrdd/bin/rrdd/rrdd_monitor.ml
@@ -155,9 +155,8 @@ let convert_to_owner_map dss =
     Also resets the value of datasources that are enabled in the RRD, but
     weren't updated on this refresh cycle.
     *)
-let update_rrds uuid_domids paused_vms plugins_dss =
+let update_rrds uuid_domids plugins_dss =
   let uuid_domids = List.to_seq uuid_domids |> StringMap.of_seq in
-  let paused_vms = List.to_seq paused_vms |> StringSet.of_seq in
   let per_owner_flattened_map, per_plugin_map =
     convert_to_owner_map plugins_dss
   in
@@ -237,18 +236,11 @@ let update_rrds uuid_domids paused_vms plugins_dss =
                      match vm_rrd with
                      | Some rrdi ->
                          let updated_dss, rrd = merge_new_dss rrdi dss in
-                         (* CA-34383: Memory updates from paused domains serve no useful
-                            purpose. During a migrate such updates can also cause undesirable
-                            discontinuities in the observed value of memory_actual. Hence, we
-                            ignore changes from paused domains: *)
-                         ( if not (StringSet.mem vm_uuid paused_vms) then
-                             let named_updates =
-                               StringMap.map to_named_updates dss
-                             in
-                             Rrd.ds_update_named rrd
-                               ~new_rrd:(domid <> rrdi.domid) timestamp
-                               named_updates
-                         ) ;
+                         let named_updates =
+                           StringMap.map to_named_updates dss
+                         in
+                         Rrd.ds_update_named rrd ~new_rrd:(domid <> rrdi.domid)
+                           timestamp named_updates ;
                          Some {rrd; dss= updated_dss; domid}
                      | None ->
                          debug "%s: Creating fresh RRD for VM uuid=%s"
diff --git a/ocaml/xcp-rrdd/bin/rrdd/xcp_rrdd.ml b/ocaml/xcp-rrdd/bin/rrdd/xcp_rrdd.ml
index 2252c1f05..b5e111f69 100644
--- a/ocaml/xcp-rrdd/bin/rrdd/xcp_rrdd.ml
+++ b/ocaml/xcp-rrdd/bin/rrdd/xcp_rrdd.ml
@@ -258,71 +258,80 @@ let mem_available () =
 let dss_mem_vms doms =
   List.fold_left
     (fun acc (dom, uuid, domid) ->
-      let kib =
-        Xenctrl.pages_to_kib (Int64.of_nativeint dom.Xenctrl.total_memory_pages)
-      in
-      let memory = Int64.mul kib 1024L in
-      let main_mem_ds =
-        ( Rrd.VM uuid
-        , Ds.ds_make ~name:"memory"
-            ~description:"Memory currently allocated to VM" ~units:"B"
-            ~value:(Rrd.VT_Int64 memory) ~ty:Rrd.Gauge ~min:0.0 ~default:true ()
-        )
-      in
-      let memory_target_opt =
-        with_lock Rrdd_shared.memory_targets_m (fun _ ->
-            Hashtbl.find_opt Rrdd_shared.memory_targets domid
-        )
-      in
-      let mem_target_ds =
-        Option.map
-          (fun memory_target ->
-            ( Rrd.VM uuid
-            , Ds.ds_make ~name:"memory_target"
-                ~description:"Target of VM balloon driver" ~units:"B"
-                ~value:(Rrd.VT_Int64 memory_target) ~ty:Rrd.Gauge ~min:0.0
-                ~default:true ()
-            )
+      let add_vm_metrics () =
+        let kib =
+          Xenctrl.pages_to_kib
+            (Int64.of_nativeint dom.Xenctrl.total_memory_pages)
+        in
+        let memory = Int64.mul kib 1024L in
+        let main_mem_ds =
+          ( Rrd.VM uuid
+          , Ds.ds_make ~name:"memory"
+              ~description:"Memory currently allocated to VM" ~units:"B"
+              ~value:(Rrd.VT_Int64 memory) ~ty:Rrd.Gauge ~min:0.0 ~default:true
+              ()
           )
-          memory_target_opt
-      in
-      let other_ds =
-        if domid = 0 then
-          match mem_available () with
-          | Ok mem ->
+        in
+        let memory_target_opt =
+          with_lock Rrdd_shared.memory_targets_m (fun _ ->
+              Hashtbl.find_opt Rrdd_shared.memory_targets domid
+          )
+        in
+        let mem_target_ds =
+          Option.map
+            (fun memory_target ->
+              ( Rrd.VM uuid
+              , Ds.ds_make ~name:"memory_target"
+                  ~description:"Target of VM balloon driver" ~units:"B"
+                  ~value:(Rrd.VT_Int64 memory_target) ~ty:Rrd.Gauge ~min:0.0
+                  ~default:true ()
+              )
+            )
+            memory_target_opt
+        in
+        let other_ds =
+          if domid = 0 then
+            match mem_available () with
+            | Ok mem ->
+                Some
+                  ( Rrd.VM uuid
+                  , Ds.ds_make ~name:"memory_internal_free" ~units:"KiB"
+                      ~description:"Dom0 current free memory"
+                      ~value:(Rrd.VT_Int64 mem) ~ty:Rrd.Gauge ~min:0.0
+                      ~default:true ()
+                  )
+            | Error msg ->
+                let _ =
+                  error "%s: retrieving  Dom0 free memory failed: %s"
+                    __FUNCTION__ msg
+                in
+                None
+          else
+            try
+              let mem_free =
+                Watch.IntMap.find domid !current_meminfofree_values
+              in
               Some
                 ( Rrd.VM uuid
                 , Ds.ds_make ~name:"memory_internal_free" ~units:"KiB"
-                    ~description:"Dom0 current free memory"
-                    ~value:(Rrd.VT_Int64 mem) ~ty:Rrd.Gauge ~min:0.0
+                    ~description:"Memory used as reported by the guest agent"
+                    ~value:(Rrd.VT_Int64 mem_free) ~ty:Rrd.Gauge ~min:0.0
                     ~default:true ()
                 )
-          | Error msg ->
-              let _ =
-                error "%s: retrieving  Dom0 free memory failed: %s" __FUNCTION__
-                  msg
-              in
-              None
-        else
-          try
-            let mem_free =
-              Watch.IntMap.find domid !current_meminfofree_values
-            in
-            Some
-              ( Rrd.VM uuid
-              , Ds.ds_make ~name:"memory_internal_free" ~units:"KiB"
-                  ~description:"Memory used as reported by the guest agent"
-                  ~value:(Rrd.VT_Int64 mem_free) ~ty:Rrd.Gauge ~min:0.0
-                  ~default:true ()
-              )
-          with Not_found -> None
+            with Not_found -> None
+        in
+        List.concat
+          [
+            main_mem_ds :: Option.to_list other_ds
+          ; Option.to_list mem_target_ds
+          ; acc
+          ]
       in
-      List.concat
-        [
-          main_mem_ds :: Option.to_list other_ds
-        ; Option.to_list mem_target_ds
-        ; acc
-        ]
+      (* CA-34383: Memory updates from paused domains serve no useful purpose.
+         During a migrate such updates can also cause undesirable
+         discontinuities in the observed value of memory_actual. Hence, we
+         ignore changes from paused domains: *)
+      if dom.Xenctrl.paused then acc else add_vm_metrics ()
     )
     [] doms
 
@@ -466,14 +475,10 @@ let domain_snapshot xc =
   let domains =
     Xenctrl.domain_getinfolist xc 0 |> List.filter_map metadata_of_domain
   in
-  let domain_paused (d, uuid, _) =
-    if d.Xenctrl.paused then Some uuid else None
-  in
-  let paused_uuids = List.filter_map domain_paused domains in
   let domids = List.map (fun (_, _, i) -> i) domains |> IntSet.of_list in
   let domains_only k v = Option.map (Fun.const v) (IntSet.find_opt k domids) in
   Hashtbl.filter_map_inplace domains_only Rrdd_shared.memory_targets ;
-  (domains, paused_uuids)
+  domains
 
 let dom0_stat_generators =
   [
@@ -507,7 +512,7 @@ let write_dom0_stats writers tagged_dss =
 
 let do_monitor_write xc writers =
   Rrdd_libs.Stats.time_this "monitor" (fun _ ->
-      let domains, my_paused_vms = domain_snapshot xc in
+      let domains = domain_snapshot xc in
       let tagged_dom0_stats = generate_all_dom0_stats xc domains in
       write_dom0_stats writers tagged_dom0_stats ;
       let dom0_stats =
@@ -523,7 +528,7 @@ let do_monitor_write xc writers =
       let uuid_domids = List.map (fun (_, u, i) -> (u, i)) domains in
 
       (* stats are grouped per plugin, which provides its timestamp *)
-      Rrdd_monitor.update_rrds uuid_domids my_paused_vms stats ;
+      Rrdd_monitor.update_rrds uuid_domids stats ;
 
       Rrdd_libs.Constants.datasource_dump_file
       |> Rrdd_server.dump_host_dss_to_file ;
diff --git a/ocaml/xcp-rrdd/test/rrdd/test_rrdd_monitor.ml b/ocaml/xcp-rrdd/test/rrdd/test_rrdd_monitor.ml
index bb0f726b5..725b34351 100644
--- a/ocaml/xcp-rrdd/test/rrdd/test_rrdd_monitor.ml
+++ b/ocaml/xcp-rrdd/test/rrdd/test_rrdd_monitor.ml
@@ -60,11 +60,11 @@ let host_rrds rrd_info =
     Hashtbl.add h "host" rrd_info ;
   Some h
 
-let update_rrds_test ~timestamp ~dss ~uuid_domids ~paused_vms ~expected_vm_rrds
+let update_rrds_test ~timestamp ~dss ~uuid_domids ~expected_vm_rrds
     ~expected_sr_rrds ~expected_host_dss =
   let test () =
     reset_rrdd_shared_state () ;
-    Rrdd_monitor.update_rrds uuid_domids paused_vms
+    Rrdd_monitor.update_rrds uuid_domids
       (List.to_seq [("update_rrds_test", timestamp, List.to_seq dss)]) ;
     check_datasources "VM" (Some Rrdd_shared.vm_rrds) expected_vm_rrds ;
     check_datasources "SR" (Some Rrdd_shared.sr_rrds) expected_sr_rrds ;
@@ -76,38 +76,37 @@ let update_rrds =
   let open Rrd in
   [
     ( "Null update"
-    , update_rrds_test ~timestamp:0. ~dss:[] ~uuid_domids:[] ~paused_vms:[]
+    , update_rrds_test ~timestamp:0. ~dss:[] ~uuid_domids:[]
         ~expected_vm_rrds:[] ~expected_sr_rrds:[] ~expected_host_dss:[]
     )
   ; ( "Single host update"
     , update_rrds_test ~timestamp:0.
         ~dss:[(Host, ds_a)]
-        ~uuid_domids:[] ~paused_vms:[] ~expected_vm_rrds:[] ~expected_sr_rrds:[]
+        ~uuid_domids:[] ~expected_vm_rrds:[] ~expected_sr_rrds:[]
         ~expected_host_dss:[("host", [ds_a])]
     )
   ; ( "Multiple host updates"
     , update_rrds_test ~timestamp:0.
         ~dss:[(Host, ds_a); (Host, ds_b)]
-        ~uuid_domids:[] ~paused_vms:[] ~expected_vm_rrds:[] ~expected_sr_rrds:[]
+        ~uuid_domids:[] ~expected_vm_rrds:[] ~expected_sr_rrds:[]
         ~expected_host_dss:[("host", [ds_a; ds_b])]
     )
   ; ( "Single non-resident VM update"
     , update_rrds_test ~timestamp:0.
         ~dss:[(VM "a", ds_a)]
-        ~uuid_domids:[] ~paused_vms:[] ~expected_vm_rrds:[] ~expected_sr_rrds:[]
+        ~uuid_domids:[] ~expected_vm_rrds:[] ~expected_sr_rrds:[]
         ~expected_host_dss:[]
     )
   ; ( "Multiple non-resident VM updates"
     , update_rrds_test ~timestamp:0.
         ~dss:[(VM "a", ds_a); (VM "b", ds_a)]
-        ~uuid_domids:[] ~paused_vms:[] ~expected_vm_rrds:[] ~expected_sr_rrds:[]
+        ~uuid_domids:[] ~expected_vm_rrds:[] ~expected_sr_rrds:[]
         ~expected_host_dss:[]
     )
   ; ( "Single resident VM update"
     , update_rrds_test ~timestamp:0.
         ~dss:[(VM "a", ds_a)]
         ~uuid_domids:[("a", 1)]
-        ~paused_vms:[]
         ~expected_vm_rrds:[("a", [ds_a])]
         ~expected_sr_rrds:[] ~expected_host_dss:[]
     )
@@ -115,7 +114,6 @@ let update_rrds =
     , update_rrds_test ~timestamp:0.
         ~dss:[(VM "a", ds_a); (VM "b", ds_a); (VM "b", ds_b)]
         ~uuid_domids:[("a", 1); ("b", 1)]
-        ~paused_vms:[]
         ~expected_vm_rrds:[("a", [ds_a]); ("b", [ds_a; ds_b])]
         ~expected_sr_rrds:[] ~expected_host_dss:[]
     )
@@ -123,14 +121,13 @@ let update_rrds =
     , update_rrds_test ~timestamp:0.
         ~dss:[(VM "a", ds_a); (VM "b", ds_a); (VM "c", ds_a)]
         ~uuid_domids:[("a", 1); ("b", 1)]
-        ~paused_vms:[]
         ~expected_vm_rrds:[("a", [ds_a]); ("b", [ds_a])]
         ~expected_sr_rrds:[] ~expected_host_dss:[]
     )
   ; ( "Multiple SR updates"
     , update_rrds_test ~timestamp:0.
         ~dss:[(SR "a", ds_a); (SR "b", ds_a); (SR "b", ds_b)]
-        ~uuid_domids:[] ~paused_vms:[] ~expected_vm_rrds:[]
+        ~uuid_domids:[] ~expected_vm_rrds:[]
         ~expected_sr_rrds:[("a", [ds_a]); ("b", [ds_a; ds_b])]
         ~expected_host_dss:[]
     )
